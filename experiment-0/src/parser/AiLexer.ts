// Generated from AiLexer.g4 by ANTLR 4.11.2-SNAPSHOT
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class AiLexer extends Lexer {
	public static readonly LPAR = 1;
	public static readonly RPAR = 2;
	public static readonly LBRAK = 3;
	public static readonly RBRAK = 4;
	public static readonly LCURL = 5;
	public static readonly RCURL = 6;
	public static readonly DOT = 7;
	public static readonly COMMA = 8;
	public static readonly COLON = 9;
	public static readonly SEMI = 10;
	public static readonly ASSIGN = 11;
	public static readonly VAR = 12;
	public static readonly RETURN = 13;
	public static readonly FUNCTION = 14;
	public static readonly INTEGER_LITERAL = 15;
	public static readonly DECIMAL_LITERAL = 16;
	public static readonly BOOLEAN_LITERAL = 17;
	public static readonly CHAR_LITERAL = 18;
	public static readonly STRING_LITERAL = 19;
	public static readonly NULL_LITERAL = 20;
	public static readonly PASCAL_CASE_IDENTIFIER = 21;
	public static readonly CAMEL_CASE_IDENTIFIER = 22;
	public static readonly ANY_IDENTIFIER = 23;
	public static readonly WS = 24;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'('", "')'", "'['", 
                                                   "']'", "'{'", "'}'", 
                                                   "'.'", "','", "':'", 
                                                   "';'", "'='", "'var'", 
                                                   "'return'", "'function'", 
                                                   null, null, null, null, 
                                                   null, "'null'" ];
	public static readonly symbolicNames: string[] = [ null, "LPAR", "RPAR", 
                                                    "LBRAK", "RBRAK", "LCURL", 
                                                    "RCURL", "DOT", "COMMA", 
                                                    "COLON", "SEMI", "ASSIGN", 
                                                    "VAR", "RETURN", "FUNCTION", 
                                                    "INTEGER_LITERAL", "DECIMAL_LITERAL", 
                                                    "BOOLEAN_LITERAL", "CHAR_LITERAL", 
                                                    "STRING_LITERAL", "NULL_LITERAL", 
                                                    "PASCAL_CASE_IDENTIFIER", 
                                                    "CAMEL_CASE_IDENTIFIER", 
                                                    "ANY_IDENTIFIER", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", "RCURL", "DOT", "COMMA", "COLON", 
		"SEMI", "ASSIGN", "VAR", "RETURN", "FUNCTION", "INTEGER_LITERAL", "DecimalIntegerLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", "IntegerTypeSuffix", 
		"DecimalNumeral", "Digits", "Digit", "NonZeroDigit", "DigitsAndUnderscores", 
		"DigitOrUnderscore", "Underscores", "HexNumeral", "HexDigits", "HexDigit", 
		"HexDigitsAndUnderscores", "HexDigitOrUnderscore", "OctalNumeral", "OctalDigits", 
		"OctalDigit", "OctalDigitsAndUnderscores", "OctalDigitOrUnderscore", "BinaryNumeral", 
		"BinaryDigits", "BinaryDigit", "BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", 
		"DECIMAL_LITERAL", "DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", 
		"SignedInteger", "Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", 
		"HexSignificand", "BinaryExponent", "BinaryExponentIndicator", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "SingleCharacter", "STRING_LITERAL", "StringCharacters", 
		"StringCharacter", "EscapeSequence", "OctalEscape", "ZeroToThree", "UnicodeEscape", 
		"NULL_LITERAL", "PASCAL_CASE_IDENTIFIER", "CAMEL_CASE_IDENTIFIER", "ANY_IDENTIFIER", 
		"Letter", "LetterOrDigit", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, AiLexer._ATN, AiLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "AiLexer.g4"; }

	public get literalNames(): (string | null)[] { return AiLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return AiLexer.symbolicNames; }
	public get ruleNames(): string[] { return AiLexer.ruleNames; }

	public get serializedATN(): number[] { return AiLexer._serializedATN; }

	public get channelNames(): string[] { return AiLexer.channelNames; }

	public get modeNames(): string[] { return AiLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,24,491,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
	5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,
	12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
	1,14,1,14,1,14,1,14,3,14,188,8,14,1,15,1,15,3,15,192,8,15,1,16,1,16,3,16,
	196,8,16,1,17,1,17,3,17,200,8,17,1,18,1,18,3,18,204,8,18,1,19,1,19,1,20,
	1,20,1,20,3,20,211,8,20,1,20,1,20,1,20,3,20,216,8,20,3,20,218,8,20,1,21,
	1,21,3,21,222,8,21,1,21,3,21,225,8,21,1,22,1,22,3,22,229,8,22,1,23,1,23,
	1,24,4,24,234,8,24,11,24,12,24,235,1,25,1,25,3,25,240,8,25,1,26,4,26,243,
	8,26,11,26,12,26,244,1,27,1,27,1,27,1,27,1,28,1,28,3,28,253,8,28,1,28,3,
	28,256,8,28,1,29,1,29,1,30,4,30,261,8,30,11,30,12,30,262,1,31,1,31,3,31,
	267,8,31,1,32,1,32,3,32,271,8,32,1,32,1,32,1,33,1,33,3,33,277,8,33,1,33,
	3,33,280,8,33,1,34,1,34,1,35,4,35,285,8,35,11,35,12,35,286,1,36,1,36,3,
	36,291,8,36,1,37,1,37,1,37,1,37,1,38,1,38,3,38,299,8,38,1,38,3,38,302,8,
	38,1,39,1,39,1,40,4,40,307,8,40,11,40,12,40,308,1,41,1,41,3,41,313,8,41,
	1,42,1,42,3,42,317,8,42,1,43,1,43,1,43,3,43,322,8,43,1,43,3,43,325,8,43,
	1,43,3,43,328,8,43,1,43,1,43,1,43,3,43,333,8,43,1,43,3,43,336,8,43,1,43,
	1,43,1,43,3,43,341,8,43,1,43,1,43,1,43,3,43,346,8,43,1,44,1,44,1,44,1,45,
	1,45,1,46,3,46,354,8,46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,3,
	49,365,8,49,1,50,1,50,3,50,369,8,50,1,50,1,50,1,50,3,50,374,8,50,1,50,1,
	50,3,50,378,8,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,
	1,53,1,53,1,53,3,53,394,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
	54,404,8,54,1,55,1,55,1,56,1,56,3,56,410,8,56,1,56,1,56,1,57,4,57,415,8,
	57,11,57,12,57,416,1,58,1,58,3,58,421,8,58,1,59,1,59,1,59,1,59,3,59,427,
	8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,440,8,
	60,1,61,1,61,1,62,1,62,4,62,446,8,62,11,62,12,62,447,1,62,1,62,1,62,1,62,
	1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,5,64,462,8,64,10,64,12,64,465,9,
	64,1,65,1,65,5,65,469,8,65,10,65,12,65,472,9,65,1,66,1,66,5,66,476,8,66,
	10,66,12,66,479,9,66,1,67,1,67,1,68,1,68,1,69,4,69,486,8,69,11,69,12,69,
	487,1,69,1,69,0,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
	23,12,25,13,27,14,29,15,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,
	0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,
	79,0,81,0,83,0,85,16,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,
	0,107,17,109,18,111,0,113,19,115,0,117,0,119,0,121,0,123,0,125,0,127,20,
	129,21,131,22,133,23,135,0,137,0,139,24,1,0,20,2,0,76,76,108,108,1,0,49,
	57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,66,98,98,1,
	0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,4,0,68,68,70,70,100,100,102,102,
	2,0,80,80,112,112,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,
	92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,48,51,
	1,0,65,90,1,0,97,122,4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,57,65,90,
	95,95,97,122,3,0,9,10,12,13,32,32,502,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
	0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
	0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
	0,29,1,0,0,0,0,85,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,113,1,0,0,0,0,127,
	1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,139,1,0,0,0,1,141,1,
	0,0,0,3,143,1,0,0,0,5,145,1,0,0,0,7,147,1,0,0,0,9,149,1,0,0,0,11,151,1,
	0,0,0,13,153,1,0,0,0,15,155,1,0,0,0,17,157,1,0,0,0,19,159,1,0,0,0,21,161,
	1,0,0,0,23,163,1,0,0,0,25,167,1,0,0,0,27,174,1,0,0,0,29,187,1,0,0,0,31,
	189,1,0,0,0,33,193,1,0,0,0,35,197,1,0,0,0,37,201,1,0,0,0,39,205,1,0,0,0,
	41,217,1,0,0,0,43,219,1,0,0,0,45,228,1,0,0,0,47,230,1,0,0,0,49,233,1,0,
	0,0,51,239,1,0,0,0,53,242,1,0,0,0,55,246,1,0,0,0,57,250,1,0,0,0,59,257,
	1,0,0,0,61,260,1,0,0,0,63,266,1,0,0,0,65,268,1,0,0,0,67,274,1,0,0,0,69,
	281,1,0,0,0,71,284,1,0,0,0,73,290,1,0,0,0,75,292,1,0,0,0,77,296,1,0,0,0,
	79,303,1,0,0,0,81,306,1,0,0,0,83,312,1,0,0,0,85,316,1,0,0,0,87,345,1,0,
	0,0,89,347,1,0,0,0,91,350,1,0,0,0,93,353,1,0,0,0,95,357,1,0,0,0,97,359,
	1,0,0,0,99,361,1,0,0,0,101,377,1,0,0,0,103,379,1,0,0,0,105,382,1,0,0,0,
	107,393,1,0,0,0,109,403,1,0,0,0,111,405,1,0,0,0,113,407,1,0,0,0,115,414,
	1,0,0,0,117,420,1,0,0,0,119,426,1,0,0,0,121,439,1,0,0,0,123,441,1,0,0,0,
	125,443,1,0,0,0,127,454,1,0,0,0,129,459,1,0,0,0,131,466,1,0,0,0,133,473,
	1,0,0,0,135,480,1,0,0,0,137,482,1,0,0,0,139,485,1,0,0,0,141,142,5,40,0,
	0,142,2,1,0,0,0,143,144,5,41,0,0,144,4,1,0,0,0,145,146,5,91,0,0,146,6,1,
	0,0,0,147,148,5,93,0,0,148,8,1,0,0,0,149,150,5,123,0,0,150,10,1,0,0,0,151,
	152,5,125,0,0,152,12,1,0,0,0,153,154,5,46,0,0,154,14,1,0,0,0,155,156,5,
	44,0,0,156,16,1,0,0,0,157,158,5,58,0,0,158,18,1,0,0,0,159,160,5,59,0,0,
	160,20,1,0,0,0,161,162,5,61,0,0,162,22,1,0,0,0,163,164,5,118,0,0,164,165,
	5,97,0,0,165,166,5,114,0,0,166,24,1,0,0,0,167,168,5,114,0,0,168,169,5,101,
	0,0,169,170,5,116,0,0,170,171,5,117,0,0,171,172,5,114,0,0,172,173,5,110,
	0,0,173,26,1,0,0,0,174,175,5,102,0,0,175,176,5,117,0,0,176,177,5,110,0,
	0,177,178,5,99,0,0,178,179,5,116,0,0,179,180,5,105,0,0,180,181,5,111,0,
	0,181,182,5,110,0,0,182,28,1,0,0,0,183,188,3,31,15,0,184,188,3,33,16,0,
	185,188,3,35,17,0,186,188,3,37,18,0,187,183,1,0,0,0,187,184,1,0,0,0,187,
	185,1,0,0,0,187,186,1,0,0,0,188,30,1,0,0,0,189,191,3,41,20,0,190,192,3,
	39,19,0,191,190,1,0,0,0,191,192,1,0,0,0,192,32,1,0,0,0,193,195,3,55,27,
	0,194,196,3,39,19,0,195,194,1,0,0,0,195,196,1,0,0,0,196,34,1,0,0,0,197,
	199,3,65,32,0,198,200,3,39,19,0,199,198,1,0,0,0,199,200,1,0,0,0,200,36,
	1,0,0,0,201,203,3,75,37,0,202,204,3,39,19,0,203,202,1,0,0,0,203,204,1,0,
	0,0,204,38,1,0,0,0,205,206,7,0,0,0,206,40,1,0,0,0,207,218,5,48,0,0,208,
	215,3,47,23,0,209,211,3,43,21,0,210,209,1,0,0,0,210,211,1,0,0,0,211,216,
	1,0,0,0,212,213,3,53,26,0,213,214,3,43,21,0,214,216,1,0,0,0,215,210,1,0,
	0,0,215,212,1,0,0,0,216,218,1,0,0,0,217,207,1,0,0,0,217,208,1,0,0,0,218,
	42,1,0,0,0,219,224,3,45,22,0,220,222,3,49,24,0,221,220,1,0,0,0,221,222,
	1,0,0,0,222,223,1,0,0,0,223,225,3,45,22,0,224,221,1,0,0,0,224,225,1,0,0,
	0,225,44,1,0,0,0,226,229,5,48,0,0,227,229,3,47,23,0,228,226,1,0,0,0,228,
	227,1,0,0,0,229,46,1,0,0,0,230,231,7,1,0,0,231,48,1,0,0,0,232,234,3,51,
	25,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,
	50,1,0,0,0,237,240,3,45,22,0,238,240,5,95,0,0,239,237,1,0,0,0,239,238,1,
	0,0,0,240,52,1,0,0,0,241,243,5,95,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,
	242,1,0,0,0,244,245,1,0,0,0,245,54,1,0,0,0,246,247,5,48,0,0,247,248,7,2,
	0,0,248,249,3,57,28,0,249,56,1,0,0,0,250,255,3,59,29,0,251,253,3,61,30,
	0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,256,3,59,29,0,255,
	252,1,0,0,0,255,256,1,0,0,0,256,58,1,0,0,0,257,258,7,3,0,0,258,60,1,0,0,
	0,259,261,3,63,31,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,
	263,1,0,0,0,263,62,1,0,0,0,264,267,3,59,29,0,265,267,5,95,0,0,266,264,1,
	0,0,0,266,265,1,0,0,0,267,64,1,0,0,0,268,270,5,48,0,0,269,271,3,53,26,0,
	270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,3,67,33,0,273,66,
	1,0,0,0,274,279,3,69,34,0,275,277,3,71,35,0,276,275,1,0,0,0,276,277,1,0,
	0,0,277,278,1,0,0,0,278,280,3,69,34,0,279,276,1,0,0,0,279,280,1,0,0,0,280,
	68,1,0,0,0,281,282,7,4,0,0,282,70,1,0,0,0,283,285,3,73,36,0,284,283,1,0,
	0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,72,1,0,0,0,288,
	291,3,69,34,0,289,291,5,95,0,0,290,288,1,0,0,0,290,289,1,0,0,0,291,74,1,
	0,0,0,292,293,5,48,0,0,293,294,7,5,0,0,294,295,3,77,38,0,295,76,1,0,0,0,
	296,301,3,79,39,0,297,299,3,81,40,0,298,297,1,0,0,0,298,299,1,0,0,0,299,
	300,1,0,0,0,300,302,3,79,39,0,301,298,1,0,0,0,301,302,1,0,0,0,302,78,1,
	0,0,0,303,304,7,6,0,0,304,80,1,0,0,0,305,307,3,83,41,0,306,305,1,0,0,0,
	307,308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,82,1,0,0,0,310,313,
	3,79,39,0,311,313,5,95,0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,84,1,0,0,
	0,314,317,3,87,43,0,315,317,3,99,49,0,316,314,1,0,0,0,316,315,1,0,0,0,317,
	86,1,0,0,0,318,319,3,43,21,0,319,321,5,46,0,0,320,322,3,43,21,0,321,320,
	1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,325,3,89,44,0,324,323,1,0,0,
	0,324,325,1,0,0,0,325,327,1,0,0,0,326,328,3,97,48,0,327,326,1,0,0,0,327,
	328,1,0,0,0,328,346,1,0,0,0,329,330,5,46,0,0,330,332,3,43,21,0,331,333,
	3,89,44,0,332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,3,97,
	48,0,335,334,1,0,0,0,335,336,1,0,0,0,336,346,1,0,0,0,337,338,3,43,21,0,
	338,340,3,89,44,0,339,341,3,97,48,0,340,339,1,0,0,0,340,341,1,0,0,0,341,
	346,1,0,0,0,342,343,3,43,21,0,343,344,3,97,48,0,344,346,1,0,0,0,345,318,
	1,0,0,0,345,329,1,0,0,0,345,337,1,0,0,0,345,342,1,0,0,0,346,88,1,0,0,0,
	347,348,3,91,45,0,348,349,3,93,46,0,349,90,1,0,0,0,350,351,7,7,0,0,351,
	92,1,0,0,0,352,354,3,95,47,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,
	0,0,0,355,356,3,43,21,0,356,94,1,0,0,0,357,358,7,8,0,0,358,96,1,0,0,0,359,
	360,7,9,0,0,360,98,1,0,0,0,361,362,3,101,50,0,362,364,3,103,51,0,363,365,
	3,97,48,0,364,363,1,0,0,0,364,365,1,0,0,0,365,100,1,0,0,0,366,368,3,55,
	27,0,367,369,5,46,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,378,1,0,0,0,370,
	371,5,48,0,0,371,373,7,2,0,0,372,374,3,57,28,0,373,372,1,0,0,0,373,374,
	1,0,0,0,374,375,1,0,0,0,375,376,5,46,0,0,376,378,3,57,28,0,377,366,1,0,
	0,0,377,370,1,0,0,0,378,102,1,0,0,0,379,380,3,105,52,0,380,381,3,93,46,
	0,381,104,1,0,0,0,382,383,7,10,0,0,383,106,1,0,0,0,384,385,5,116,0,0,385,
	386,5,114,0,0,386,387,5,117,0,0,387,394,5,101,0,0,388,389,5,102,0,0,389,
	390,5,97,0,0,390,391,5,108,0,0,391,392,5,115,0,0,392,394,5,101,0,0,393,
	384,1,0,0,0,393,388,1,0,0,0,394,108,1,0,0,0,395,396,5,39,0,0,396,397,3,
	111,55,0,397,398,5,39,0,0,398,404,1,0,0,0,399,400,5,39,0,0,400,401,3,119,
	59,0,401,402,5,39,0,0,402,404,1,0,0,0,403,395,1,0,0,0,403,399,1,0,0,0,404,
	110,1,0,0,0,405,406,8,11,0,0,406,112,1,0,0,0,407,409,5,34,0,0,408,410,3,
	115,57,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,5,34,0,
	0,412,114,1,0,0,0,413,415,3,117,58,0,414,413,1,0,0,0,415,416,1,0,0,0,416,
	414,1,0,0,0,416,417,1,0,0,0,417,116,1,0,0,0,418,421,8,12,0,0,419,421,3,
	119,59,0,420,418,1,0,0,0,420,419,1,0,0,0,421,118,1,0,0,0,422,423,5,92,0,
	0,423,427,7,13,0,0,424,427,3,121,60,0,425,427,3,125,62,0,426,422,1,0,0,
	0,426,424,1,0,0,0,426,425,1,0,0,0,427,120,1,0,0,0,428,429,5,92,0,0,429,
	440,3,69,34,0,430,431,5,92,0,0,431,432,3,69,34,0,432,433,3,69,34,0,433,
	440,1,0,0,0,434,435,5,92,0,0,435,436,3,123,61,0,436,437,3,69,34,0,437,438,
	3,69,34,0,438,440,1,0,0,0,439,428,1,0,0,0,439,430,1,0,0,0,439,434,1,0,0,
	0,440,122,1,0,0,0,441,442,7,14,0,0,442,124,1,0,0,0,443,445,5,92,0,0,444,
	446,5,117,0,0,445,444,1,0,0,0,446,447,1,0,0,0,447,445,1,0,0,0,447,448,1,
	0,0,0,448,449,1,0,0,0,449,450,3,59,29,0,450,451,3,59,29,0,451,452,3,59,
	29,0,452,453,3,59,29,0,453,126,1,0,0,0,454,455,5,110,0,0,455,456,5,117,
	0,0,456,457,5,108,0,0,457,458,5,108,0,0,458,128,1,0,0,0,459,463,7,15,0,
	0,460,462,3,137,68,0,461,460,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,
	464,1,0,0,0,464,130,1,0,0,0,465,463,1,0,0,0,466,470,7,16,0,0,467,469,3,
	137,68,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,
	0,471,132,1,0,0,0,472,470,1,0,0,0,473,477,3,135,67,0,474,476,3,137,68,0,
	475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,134,
	1,0,0,0,479,477,1,0,0,0,480,481,7,17,0,0,481,136,1,0,0,0,482,483,7,18,0,
	0,483,138,1,0,0,0,484,486,7,19,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,
	485,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,490,6,69,0,0,490,140,1,
	0,0,0,53,0,187,191,195,199,203,210,215,217,221,224,228,235,239,244,252,
	255,262,266,270,276,279,286,290,298,301,308,312,316,321,324,327,332,335,
	340,345,353,364,368,373,377,393,403,409,416,420,426,439,447,463,470,477,
	487,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AiLexer.__ATN) {
			AiLexer.__ATN = new ATNDeserializer().deserialize(AiLexer._serializedATN);
		}

		return AiLexer.__ATN;
	}


	static DecisionsToDFA = AiLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}