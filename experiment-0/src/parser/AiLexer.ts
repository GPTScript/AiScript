// Generated from AiLexer.g4 by ANTLR 4.11.2-SNAPSHOT
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class AiLexer extends Lexer {
	public static readonly LPAR = 1;
	public static readonly RPAR = 2;
	public static readonly LBRAK = 3;
	public static readonly RBRAK = 4;
	public static readonly LCURL = 5;
	public static readonly RCURL = 6;
	public static readonly DOT = 7;
	public static readonly COMMA = 8;
	public static readonly COLON = 9;
	public static readonly SEMI = 10;
	public static readonly ASSIGN = 11;
	public static readonly VAR = 12;
	public static readonly FUNCTION = 13;
	public static readonly INTEGER_LITERAL = 14;
	public static readonly DECIMAL_LITERAL = 15;
	public static readonly BOOLEAN_LITERAL = 16;
	public static readonly CHAR_LITERAL = 17;
	public static readonly STRING_LITERAL = 18;
	public static readonly NULL_LITERAL = 19;
	public static readonly PASCAL_CASE_IDENTIFIER = 20;
	public static readonly CAMEL_CASE_IDENTIFIER = 21;
	public static readonly ANY_IDENTIFIER = 22;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: string[] = [ null, "'('", "')'", "'['", 
                                                   "']'", "'{'", "'}'", 
                                                   "'.'", "','", "':'", 
                                                   "';'", "'='", "'var'", 
                                                   "'function'", null, null, 
                                                   null, null, null, "'null'" ];
	public static readonly symbolicNames: string[] = [ null, "LPAR", "RPAR", 
                                                    "LBRAK", "RBRAK", "LCURL", 
                                                    "RCURL", "DOT", "COMMA", 
                                                    "COLON", "SEMI", "ASSIGN", 
                                                    "VAR", "FUNCTION", "INTEGER_LITERAL", 
                                                    "DECIMAL_LITERAL", "BOOLEAN_LITERAL", 
                                                    "CHAR_LITERAL", "STRING_LITERAL", 
                                                    "NULL_LITERAL", "PASCAL_CASE_IDENTIFIER", 
                                                    "CAMEL_CASE_IDENTIFIER", 
                                                    "ANY_IDENTIFIER" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"LPAR", "RPAR", "LBRAK", "RBRAK", "LCURL", "RCURL", "DOT", "COMMA", "COLON", 
		"SEMI", "ASSIGN", "VAR", "FUNCTION", "INTEGER_LITERAL", "DecimalIntegerLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", "IntegerTypeSuffix", 
		"DecimalNumeral", "Digits", "Digit", "NonZeroDigit", "DigitsAndUnderscores", 
		"DigitOrUnderscore", "Underscores", "HexNumeral", "HexDigits", "HexDigit", 
		"HexDigitsAndUnderscores", "HexDigitOrUnderscore", "OctalNumeral", "OctalDigits", 
		"OctalDigit", "OctalDigitsAndUnderscores", "OctalDigitOrUnderscore", "BinaryNumeral", 
		"BinaryDigits", "BinaryDigit", "BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", 
		"DECIMAL_LITERAL", "DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", 
		"SignedInteger", "Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", 
		"HexSignificand", "BinaryExponent", "BinaryExponentIndicator", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "SingleCharacter", "STRING_LITERAL", "StringCharacters", 
		"StringCharacter", "EscapeSequence", "OctalEscape", "ZeroToThree", "UnicodeEscape", 
		"NULL_LITERAL", "PASCAL_CASE_IDENTIFIER", "CAMEL_CASE_IDENTIFIER", "ANY_IDENTIFIER", 
		"Letter", "LetterOrDigit",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, AiLexer._ATN, AiLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "AiLexer.g4"; }

	public get literalNames(): (string | null)[] { return AiLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return AiLexer.symbolicNames; }
	public get ruleNames(): string[] { return AiLexer.ruleNames; }

	public get serializedATN(): number[] { return AiLexer._serializedATN; }

	public get channelNames(): string[] { return AiLexer.channelNames; }

	public get modeNames(): string[] { return AiLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,22,479,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
	8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
	12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,177,8,13,1,14,1,14,3,14,181,
	8,14,1,15,1,15,3,15,185,8,15,1,16,1,16,3,16,189,8,16,1,17,1,17,3,17,193,
	8,17,1,18,1,18,1,19,1,19,1,19,3,19,200,8,19,1,19,1,19,1,19,3,19,205,8,19,
	3,19,207,8,19,1,20,1,20,3,20,211,8,20,1,20,3,20,214,8,20,1,21,1,21,3,21,
	218,8,21,1,22,1,22,1,23,4,23,223,8,23,11,23,12,23,224,1,24,1,24,3,24,229,
	8,24,1,25,4,25,232,8,25,11,25,12,25,233,1,26,1,26,1,26,1,26,1,27,1,27,3,
	27,242,8,27,1,27,3,27,245,8,27,1,28,1,28,1,29,4,29,250,8,29,11,29,12,29,
	251,1,30,1,30,3,30,256,8,30,1,31,1,31,3,31,260,8,31,1,31,1,31,1,32,1,32,
	3,32,266,8,32,1,32,3,32,269,8,32,1,33,1,33,1,34,4,34,274,8,34,11,34,12,
	34,275,1,35,1,35,3,35,280,8,35,1,36,1,36,1,36,1,36,1,37,1,37,3,37,288,8,
	37,1,37,3,37,291,8,37,1,38,1,38,1,39,4,39,296,8,39,11,39,12,39,297,1,40,
	1,40,3,40,302,8,40,1,41,1,41,3,41,306,8,41,1,42,1,42,1,42,3,42,311,8,42,
	1,42,3,42,314,8,42,1,42,3,42,317,8,42,1,42,1,42,1,42,3,42,322,8,42,1,42,
	3,42,325,8,42,1,42,1,42,1,42,3,42,330,8,42,1,42,1,42,1,42,3,42,335,8,42,
	1,43,1,43,1,43,1,44,1,44,1,45,3,45,343,8,45,1,45,1,45,1,46,1,46,1,47,1,
	47,1,48,1,48,1,48,3,48,354,8,48,1,49,1,49,3,49,358,8,49,1,49,1,49,1,49,
	3,49,363,8,49,1,49,1,49,3,49,367,8,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,
	1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,383,8,52,1,53,1,53,1,53,1,53,1,
	53,1,53,1,53,1,53,3,53,393,8,53,1,54,1,54,1,55,1,55,3,55,399,8,55,1,55,
	1,55,1,56,4,56,404,8,56,11,56,12,56,405,1,57,1,57,3,57,410,8,57,1,58,1,
	58,1,58,1,58,3,58,416,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
	1,59,1,59,3,59,429,8,59,1,60,1,60,1,61,1,61,4,61,435,8,61,11,61,12,61,436,
	1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
	63,5,63,454,8,63,10,63,12,63,457,9,63,1,64,1,64,1,64,1,64,1,64,5,64,464,
	8,64,10,64,12,64,467,9,64,1,65,1,65,5,65,471,8,65,10,65,12,65,474,9,65,
	1,66,1,66,1,67,1,67,0,0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
	21,11,23,12,25,13,27,14,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,
	0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,
	77,0,79,0,81,0,83,15,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,
	0,105,16,107,17,109,0,111,18,113,0,115,0,117,0,119,0,121,0,123,0,125,19,
	127,20,129,21,131,22,133,0,135,0,1,0,17,2,0,76,76,108,108,1,0,49,57,2,0,
	88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,66,98,98,1,0,48,49,
	2,0,69,69,101,101,2,0,43,43,45,45,4,0,68,68,70,70,100,100,102,102,2,0,80,
	80,112,112,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,8,0,
	34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,48,51,4,0,36,
	36,65,90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,489,0,1,1,0,0,
	0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
	25,1,0,0,0,0,27,1,0,0,0,0,83,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,111,
	1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,1,137,1,
	0,0,0,3,139,1,0,0,0,5,141,1,0,0,0,7,143,1,0,0,0,9,145,1,0,0,0,11,147,1,
	0,0,0,13,149,1,0,0,0,15,151,1,0,0,0,17,153,1,0,0,0,19,155,1,0,0,0,21,157,
	1,0,0,0,23,159,1,0,0,0,25,163,1,0,0,0,27,176,1,0,0,0,29,178,1,0,0,0,31,
	182,1,0,0,0,33,186,1,0,0,0,35,190,1,0,0,0,37,194,1,0,0,0,39,206,1,0,0,0,
	41,208,1,0,0,0,43,217,1,0,0,0,45,219,1,0,0,0,47,222,1,0,0,0,49,228,1,0,
	0,0,51,231,1,0,0,0,53,235,1,0,0,0,55,239,1,0,0,0,57,246,1,0,0,0,59,249,
	1,0,0,0,61,255,1,0,0,0,63,257,1,0,0,0,65,263,1,0,0,0,67,270,1,0,0,0,69,
	273,1,0,0,0,71,279,1,0,0,0,73,281,1,0,0,0,75,285,1,0,0,0,77,292,1,0,0,0,
	79,295,1,0,0,0,81,301,1,0,0,0,83,305,1,0,0,0,85,334,1,0,0,0,87,336,1,0,
	0,0,89,339,1,0,0,0,91,342,1,0,0,0,93,346,1,0,0,0,95,348,1,0,0,0,97,350,
	1,0,0,0,99,366,1,0,0,0,101,368,1,0,0,0,103,371,1,0,0,0,105,382,1,0,0,0,
	107,392,1,0,0,0,109,394,1,0,0,0,111,396,1,0,0,0,113,403,1,0,0,0,115,409,
	1,0,0,0,117,415,1,0,0,0,119,428,1,0,0,0,121,430,1,0,0,0,123,432,1,0,0,0,
	125,443,1,0,0,0,127,448,1,0,0,0,129,458,1,0,0,0,131,468,1,0,0,0,133,475,
	1,0,0,0,135,477,1,0,0,0,137,138,5,40,0,0,138,2,1,0,0,0,139,140,5,41,0,0,
	140,4,1,0,0,0,141,142,5,91,0,0,142,6,1,0,0,0,143,144,5,93,0,0,144,8,1,0,
	0,0,145,146,5,123,0,0,146,10,1,0,0,0,147,148,5,125,0,0,148,12,1,0,0,0,149,
	150,5,46,0,0,150,14,1,0,0,0,151,152,5,44,0,0,152,16,1,0,0,0,153,154,5,58,
	0,0,154,18,1,0,0,0,155,156,5,59,0,0,156,20,1,0,0,0,157,158,5,61,0,0,158,
	22,1,0,0,0,159,160,5,118,0,0,160,161,5,97,0,0,161,162,5,114,0,0,162,24,
	1,0,0,0,163,164,5,102,0,0,164,165,5,117,0,0,165,166,5,110,0,0,166,167,5,
	99,0,0,167,168,5,116,0,0,168,169,5,105,0,0,169,170,5,111,0,0,170,171,5,
	110,0,0,171,26,1,0,0,0,172,177,3,29,14,0,173,177,3,31,15,0,174,177,3,33,
	16,0,175,177,3,35,17,0,176,172,1,0,0,0,176,173,1,0,0,0,176,174,1,0,0,0,
	176,175,1,0,0,0,177,28,1,0,0,0,178,180,3,39,19,0,179,181,3,37,18,0,180,
	179,1,0,0,0,180,181,1,0,0,0,181,30,1,0,0,0,182,184,3,53,26,0,183,185,3,
	37,18,0,184,183,1,0,0,0,184,185,1,0,0,0,185,32,1,0,0,0,186,188,3,63,31,
	0,187,189,3,37,18,0,188,187,1,0,0,0,188,189,1,0,0,0,189,34,1,0,0,0,190,
	192,3,73,36,0,191,193,3,37,18,0,192,191,1,0,0,0,192,193,1,0,0,0,193,36,
	1,0,0,0,194,195,7,0,0,0,195,38,1,0,0,0,196,207,5,48,0,0,197,204,3,45,22,
	0,198,200,3,41,20,0,199,198,1,0,0,0,199,200,1,0,0,0,200,205,1,0,0,0,201,
	202,3,51,25,0,202,203,3,41,20,0,203,205,1,0,0,0,204,199,1,0,0,0,204,201,
	1,0,0,0,205,207,1,0,0,0,206,196,1,0,0,0,206,197,1,0,0,0,207,40,1,0,0,0,
	208,213,3,43,21,0,209,211,3,47,23,0,210,209,1,0,0,0,210,211,1,0,0,0,211,
	212,1,0,0,0,212,214,3,43,21,0,213,210,1,0,0,0,213,214,1,0,0,0,214,42,1,
	0,0,0,215,218,5,48,0,0,216,218,3,45,22,0,217,215,1,0,0,0,217,216,1,0,0,
	0,218,44,1,0,0,0,219,220,7,1,0,0,220,46,1,0,0,0,221,223,3,49,24,0,222,221,
	1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,48,1,0,0,0,
	226,229,3,43,21,0,227,229,5,95,0,0,228,226,1,0,0,0,228,227,1,0,0,0,229,
	50,1,0,0,0,230,232,5,95,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,
	0,0,233,234,1,0,0,0,234,52,1,0,0,0,235,236,5,48,0,0,236,237,7,2,0,0,237,
	238,3,55,27,0,238,54,1,0,0,0,239,244,3,57,28,0,240,242,3,59,29,0,241,240,
	1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,245,3,57,28,0,244,241,1,0,0,
	0,244,245,1,0,0,0,245,56,1,0,0,0,246,247,7,3,0,0,247,58,1,0,0,0,248,250,
	3,61,30,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,
	0,252,60,1,0,0,0,253,256,3,57,28,0,254,256,5,95,0,0,255,253,1,0,0,0,255,
	254,1,0,0,0,256,62,1,0,0,0,257,259,5,48,0,0,258,260,3,51,25,0,259,258,1,
	0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,3,65,32,0,262,64,1,0,0,0,
	263,268,3,67,33,0,264,266,3,69,34,0,265,264,1,0,0,0,265,266,1,0,0,0,266,
	267,1,0,0,0,267,269,3,67,33,0,268,265,1,0,0,0,268,269,1,0,0,0,269,66,1,
	0,0,0,270,271,7,4,0,0,271,68,1,0,0,0,272,274,3,71,35,0,273,272,1,0,0,0,
	274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,70,1,0,0,0,277,280,
	3,67,33,0,278,280,5,95,0,0,279,277,1,0,0,0,279,278,1,0,0,0,280,72,1,0,0,
	0,281,282,5,48,0,0,282,283,7,5,0,0,283,284,3,75,37,0,284,74,1,0,0,0,285,
	290,3,77,38,0,286,288,3,79,39,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,
	1,0,0,0,289,291,3,77,38,0,290,287,1,0,0,0,290,291,1,0,0,0,291,76,1,0,0,
	0,292,293,7,6,0,0,293,78,1,0,0,0,294,296,3,81,40,0,295,294,1,0,0,0,296,
	297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,80,1,0,0,0,299,302,3,77,
	38,0,300,302,5,95,0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,82,1,0,0,0,303,
	306,3,85,42,0,304,306,3,97,48,0,305,303,1,0,0,0,305,304,1,0,0,0,306,84,
	1,0,0,0,307,308,3,41,20,0,308,310,5,46,0,0,309,311,3,41,20,0,310,309,1,
	0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,314,3,87,43,0,313,312,1,0,0,0,
	313,314,1,0,0,0,314,316,1,0,0,0,315,317,3,95,47,0,316,315,1,0,0,0,316,317,
	1,0,0,0,317,335,1,0,0,0,318,319,5,46,0,0,319,321,3,41,20,0,320,322,3,87,
	43,0,321,320,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,325,3,95,47,0,
	324,323,1,0,0,0,324,325,1,0,0,0,325,335,1,0,0,0,326,327,3,41,20,0,327,329,
	3,87,43,0,328,330,3,95,47,0,329,328,1,0,0,0,329,330,1,0,0,0,330,335,1,0,
	0,0,331,332,3,41,20,0,332,333,3,95,47,0,333,335,1,0,0,0,334,307,1,0,0,0,
	334,318,1,0,0,0,334,326,1,0,0,0,334,331,1,0,0,0,335,86,1,0,0,0,336,337,
	3,89,44,0,337,338,3,91,45,0,338,88,1,0,0,0,339,340,7,7,0,0,340,90,1,0,0,
	0,341,343,3,93,46,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,
	345,3,41,20,0,345,92,1,0,0,0,346,347,7,8,0,0,347,94,1,0,0,0,348,349,7,9,
	0,0,349,96,1,0,0,0,350,351,3,99,49,0,351,353,3,101,50,0,352,354,3,95,47,
	0,353,352,1,0,0,0,353,354,1,0,0,0,354,98,1,0,0,0,355,357,3,53,26,0,356,
	358,5,46,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,367,1,0,0,0,359,360,5,
	48,0,0,360,362,7,2,0,0,361,363,3,55,27,0,362,361,1,0,0,0,362,363,1,0,0,
	0,363,364,1,0,0,0,364,365,5,46,0,0,365,367,3,55,27,0,366,355,1,0,0,0,366,
	359,1,0,0,0,367,100,1,0,0,0,368,369,3,103,51,0,369,370,3,91,45,0,370,102,
	1,0,0,0,371,372,7,10,0,0,372,104,1,0,0,0,373,374,5,116,0,0,374,375,5,114,
	0,0,375,376,5,117,0,0,376,383,5,101,0,0,377,378,5,102,0,0,378,379,5,97,
	0,0,379,380,5,108,0,0,380,381,5,115,0,0,381,383,5,101,0,0,382,373,1,0,0,
	0,382,377,1,0,0,0,383,106,1,0,0,0,384,385,5,39,0,0,385,386,3,109,54,0,386,
	387,5,39,0,0,387,393,1,0,0,0,388,389,5,39,0,0,389,390,3,117,58,0,390,391,
	5,39,0,0,391,393,1,0,0,0,392,384,1,0,0,0,392,388,1,0,0,0,393,108,1,0,0,
	0,394,395,8,11,0,0,395,110,1,0,0,0,396,398,5,34,0,0,397,399,3,113,56,0,
	398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,34,0,0,401,112,
	1,0,0,0,402,404,3,115,57,0,403,402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,
	0,0,405,406,1,0,0,0,406,114,1,0,0,0,407,410,8,12,0,0,408,410,3,117,58,0,
	409,407,1,0,0,0,409,408,1,0,0,0,410,116,1,0,0,0,411,412,5,92,0,0,412,416,
	7,13,0,0,413,416,3,119,59,0,414,416,3,123,61,0,415,411,1,0,0,0,415,413,
	1,0,0,0,415,414,1,0,0,0,416,118,1,0,0,0,417,418,5,92,0,0,418,429,3,67,33,
	0,419,420,5,92,0,0,420,421,3,67,33,0,421,422,3,67,33,0,422,429,1,0,0,0,
	423,424,5,92,0,0,424,425,3,121,60,0,425,426,3,67,33,0,426,427,3,67,33,0,
	427,429,1,0,0,0,428,417,1,0,0,0,428,419,1,0,0,0,428,423,1,0,0,0,429,120,
	1,0,0,0,430,431,7,14,0,0,431,122,1,0,0,0,432,434,5,92,0,0,433,435,5,117,
	0,0,434,433,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
	438,1,0,0,0,438,439,3,57,28,0,439,440,3,57,28,0,440,441,3,57,28,0,441,442,
	3,57,28,0,442,124,1,0,0,0,443,444,5,110,0,0,444,445,5,117,0,0,445,446,5,
	108,0,0,446,447,5,108,0,0,447,126,1,0,0,0,448,449,5,65,0,0,449,450,5,45,
	0,0,450,451,5,90,0,0,451,455,1,0,0,0,452,454,3,135,67,0,453,452,1,0,0,0,
	454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,128,1,0,0,0,457,455,
	1,0,0,0,458,459,5,97,0,0,459,460,5,45,0,0,460,461,5,122,0,0,461,465,1,0,
	0,0,462,464,3,135,67,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,
	465,466,1,0,0,0,466,130,1,0,0,0,467,465,1,0,0,0,468,472,3,133,66,0,469,
	471,3,135,67,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,
	1,0,0,0,473,132,1,0,0,0,474,472,1,0,0,0,475,476,7,15,0,0,476,134,1,0,0,
	0,477,478,7,16,0,0,478,136,1,0,0,0,52,0,176,180,184,188,192,199,204,206,
	210,213,217,224,228,233,241,244,251,255,259,265,268,275,279,287,290,297,
	301,305,310,313,316,321,324,329,334,342,353,357,362,366,382,392,398,405,
	409,415,428,436,455,465,472,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AiLexer.__ATN) {
			AiLexer.__ATN = new ATNDeserializer().deserialize(AiLexer._serializedATN);
		}

		return AiLexer.__ATN;
	}


	static DecisionsToDFA = AiLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}