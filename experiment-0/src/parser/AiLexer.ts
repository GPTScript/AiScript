// Generated from AiLexer.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class AiLexer extends Lexer {
	public static readonly MULTI_LINE_COMMENT = 1;
	public static readonly SINGLE_LINE_COMMENT = 2;
	public static readonly LPAR = 3;
	public static readonly RPAR = 4;
	public static readonly LBRAK = 5;
	public static readonly RBRAK = 6;
	public static readonly LCURL = 7;
	public static readonly RCURL = 8;
	public static readonly DOT = 9;
	public static readonly COMMA = 10;
	public static readonly COLON = 11;
	public static readonly SEMI = 12;
	public static readonly ASSIGN = 13;
	public static readonly VAR = 14;
	public static readonly RETURN = 15;
	public static readonly FUNCTION = 16;
	public static readonly INTEGER_LITERAL = 17;
	public static readonly DECIMAL_LITERAL = 18;
	public static readonly NULL_LITERAL = 19;
	public static readonly BOOLEAN_LITERAL = 20;
	public static readonly CHAR_LITERAL = 21;
	public static readonly STRING_LITERAL = 22;
	public static readonly PASCAL_CASE_IDENTIFIER = 23;
	public static readonly CAMEL_CASE_IDENTIFIER = 24;
	public static readonly ANY_IDENTIFIER = 25;
	public static readonly WS = 26;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", 
                                                                                      "COMMENT" ];
	public static readonly literalNames: string[] = [ null, null, null, "'('", 
                                                   "')'", "'['", "']'", 
                                                   "'{'", "'}'", "'.'", 
                                                   "','", "':'", "';'", 
                                                   "'='", "'var'", "'return'", 
                                                   "'function'", null, null, 
                                                   "'null'" ];
	public static readonly symbolicNames: string[] = [ null, "MULTI_LINE_COMMENT", 
                                                    "SINGLE_LINE_COMMENT", 
                                                    "LPAR", "RPAR", "LBRAK", 
                                                    "RBRAK", "LCURL", "RCURL", 
                                                    "DOT", "COMMA", "COLON", 
                                                    "SEMI", "ASSIGN", "VAR", 
                                                    "RETURN", "FUNCTION", 
                                                    "INTEGER_LITERAL", "DECIMAL_LITERAL", 
                                                    "NULL_LITERAL", "BOOLEAN_LITERAL", 
                                                    "CHAR_LITERAL", "STRING_LITERAL", 
                                                    "PASCAL_CASE_IDENTIFIER", 
                                                    "CAMEL_CASE_IDENTIFIER", 
                                                    "ANY_IDENTIFIER", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "LPAR", "RPAR", "LBRAK", 
		"RBRAK", "LCURL", "RCURL", "DOT", "COMMA", "COLON", "SEMI", "ASSIGN", 
		"VAR", "RETURN", "FUNCTION", "INTEGER_LITERAL", "DecimalIntegerLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", "IntegerTypeSuffix", 
		"DecimalNumeral", "Digits", "Digit", "NonZeroDigit", "DigitsAndUnderscores", 
		"DigitOrUnderscore", "Underscores", "HexNumeral", "HexDigits", "HexDigit", 
		"HexDigitsAndUnderscores", "HexDigitOrUnderscore", "OctalNumeral", "OctalDigits", 
		"OctalDigit", "OctalDigitsAndUnderscores", "OctalDigitOrUnderscore", "BinaryNumeral", 
		"BinaryDigits", "BinaryDigit", "BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", 
		"DECIMAL_LITERAL", "DecimalFloatingPointLiteral", "ExponentPart", "ExponentIndicator", 
		"SignedInteger", "Sign", "FloatTypeSuffix", "HexadecimalFloatingPointLiteral", 
		"HexSignificand", "BinaryExponent", "BinaryExponentIndicator", "NULL_LITERAL", 
		"BOOLEAN_LITERAL", "CHAR_LITERAL", "SingleCharacter", "STRING_LITERAL", 
		"StringCharacters", "StringCharacter", "EscapeSequence", "OctalEscape", 
		"ZeroToThree", "UnicodeEscape", "PASCAL_CASE_IDENTIFIER", "CAMEL_CASE_IDENTIFIER", 
		"ANY_IDENTIFIER", "Letter", "LetterOrDigit", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, AiLexer._ATN, AiLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "AiLexer.g4"; }

	public get literalNames(): (string | null)[] { return AiLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return AiLexer.symbolicNames; }
	public get ruleNames(): string[] { return AiLexer.ruleNames; }

	public get serializedATN(): number[] { return AiLexer._serializedATN; }

	public get channelNames(): string[] { return AiLexer.channelNames; }

	public get modeNames(): string[] { return AiLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,26,520,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,1,0,1,0,1,0,1,0,5,0,150,8,
	0,10,0,12,0,153,9,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,164,8,1,10,
	1,12,1,167,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
	1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
	1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
	15,1,16,1,16,1,16,1,16,3,16,217,8,16,1,17,1,17,3,17,221,8,17,1,18,1,18,
	3,18,225,8,18,1,19,1,19,3,19,229,8,19,1,20,1,20,3,20,233,8,20,1,21,1,21,
	1,22,1,22,1,22,3,22,240,8,22,1,22,1,22,1,22,3,22,245,8,22,3,22,247,8,22,
	1,23,1,23,3,23,251,8,23,1,23,3,23,254,8,23,1,24,1,24,3,24,258,8,24,1,25,
	1,25,1,26,4,26,263,8,26,11,26,12,26,264,1,27,1,27,3,27,269,8,27,1,28,4,
	28,272,8,28,11,28,12,28,273,1,29,1,29,1,29,1,29,1,30,1,30,3,30,282,8,30,
	1,30,3,30,285,8,30,1,31,1,31,1,32,4,32,290,8,32,11,32,12,32,291,1,33,1,
	33,3,33,296,8,33,1,34,1,34,3,34,300,8,34,1,34,1,34,1,35,1,35,3,35,306,8,
	35,1,35,3,35,309,8,35,1,36,1,36,1,37,4,37,314,8,37,11,37,12,37,315,1,38,
	1,38,3,38,320,8,38,1,39,1,39,1,39,1,39,1,40,1,40,3,40,328,8,40,1,40,3,40,
	331,8,40,1,41,1,41,1,42,4,42,336,8,42,11,42,12,42,337,1,43,1,43,3,43,342,
	8,43,1,44,1,44,3,44,346,8,44,1,45,1,45,1,45,3,45,351,8,45,1,45,3,45,354,
	8,45,1,45,3,45,357,8,45,1,45,1,45,1,45,3,45,362,8,45,1,45,3,45,365,8,45,
	1,45,1,45,1,45,3,45,370,8,45,1,45,1,45,1,45,3,45,375,8,45,1,46,1,46,1,46,
	1,47,1,47,1,48,3,48,383,8,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,
	51,3,51,394,8,51,1,52,1,52,3,52,398,8,52,1,52,1,52,1,52,3,52,403,8,52,1,
	52,1,52,3,52,407,8,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,
	1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,428,8,56,1,57,1,57,1,
	57,1,57,1,57,1,57,1,57,1,57,3,57,438,8,57,1,58,1,58,1,59,1,59,3,59,444,
	8,59,1,59,1,59,1,60,4,60,449,8,60,11,60,12,60,450,1,61,1,61,3,61,455,8,
	61,1,62,1,62,1,62,1,62,3,62,461,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
	1,63,1,63,1,63,1,63,3,63,474,8,63,1,64,1,64,1,65,1,65,4,65,480,8,65,11,
	65,12,65,481,1,65,1,65,1,65,1,65,1,65,1,66,1,66,5,66,491,8,66,10,66,12,
	66,494,9,66,1,67,1,67,5,67,498,8,67,10,67,12,67,501,9,67,1,68,1,68,5,68,
	505,8,68,10,68,12,68,508,9,68,1,69,1,69,1,70,1,70,1,71,4,71,515,8,71,11,
	71,12,71,516,1,71,1,71,1,151,0,72,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,0,39,0,41,0,43,
	0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,
	73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,18,91,0,93,0,95,0,97,0,99,0,
	101,0,103,0,105,0,107,0,109,0,111,19,113,20,115,21,117,0,119,22,121,0,123,
	0,125,0,127,0,129,0,131,0,133,23,135,24,137,25,139,0,141,0,143,26,1,0,21,
	3,0,10,10,13,13,8232,8233,2,0,76,76,108,108,1,0,49,57,2,0,88,88,120,120,
	3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,66,98,98,1,0,48,49,2,0,69,69,101,
	101,2,0,43,43,45,45,4,0,68,68,70,70,100,100,102,102,2,0,80,80,112,112,4,
	0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,
	92,98,98,102,102,110,110,114,114,116,116,1,0,48,51,1,0,65,90,1,0,97,122,
	4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,3,0,9,10,
	12,13,32,32,533,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
	0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
	0,0,0,33,1,0,0,0,0,89,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
	0,119,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,143,1,0,0,0,1,
	145,1,0,0,0,3,159,1,0,0,0,5,170,1,0,0,0,7,172,1,0,0,0,9,174,1,0,0,0,11,
	176,1,0,0,0,13,178,1,0,0,0,15,180,1,0,0,0,17,182,1,0,0,0,19,184,1,0,0,0,
	21,186,1,0,0,0,23,188,1,0,0,0,25,190,1,0,0,0,27,192,1,0,0,0,29,196,1,0,
	0,0,31,203,1,0,0,0,33,216,1,0,0,0,35,218,1,0,0,0,37,222,1,0,0,0,39,226,
	1,0,0,0,41,230,1,0,0,0,43,234,1,0,0,0,45,246,1,0,0,0,47,248,1,0,0,0,49,
	257,1,0,0,0,51,259,1,0,0,0,53,262,1,0,0,0,55,268,1,0,0,0,57,271,1,0,0,0,
	59,275,1,0,0,0,61,279,1,0,0,0,63,286,1,0,0,0,65,289,1,0,0,0,67,295,1,0,
	0,0,69,297,1,0,0,0,71,303,1,0,0,0,73,310,1,0,0,0,75,313,1,0,0,0,77,319,
	1,0,0,0,79,321,1,0,0,0,81,325,1,0,0,0,83,332,1,0,0,0,85,335,1,0,0,0,87,
	341,1,0,0,0,89,345,1,0,0,0,91,374,1,0,0,0,93,376,1,0,0,0,95,379,1,0,0,0,
	97,382,1,0,0,0,99,386,1,0,0,0,101,388,1,0,0,0,103,390,1,0,0,0,105,406,1,
	0,0,0,107,408,1,0,0,0,109,411,1,0,0,0,111,413,1,0,0,0,113,427,1,0,0,0,115,
	437,1,0,0,0,117,439,1,0,0,0,119,441,1,0,0,0,121,448,1,0,0,0,123,454,1,0,
	0,0,125,460,1,0,0,0,127,473,1,0,0,0,129,475,1,0,0,0,131,477,1,0,0,0,133,
	488,1,0,0,0,135,495,1,0,0,0,137,502,1,0,0,0,139,509,1,0,0,0,141,511,1,0,
	0,0,143,514,1,0,0,0,145,146,5,47,0,0,146,147,5,42,0,0,147,151,1,0,0,0,148,
	150,9,0,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,152,1,0,0,0,151,149,1,0,
	0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,42,0,0,155,156,5,47,0,0,156,
	157,1,0,0,0,157,158,6,0,0,0,158,2,1,0,0,0,159,160,5,47,0,0,160,161,5,47,
	0,0,161,165,1,0,0,0,162,164,8,0,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,
	163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,6,1,
	1,0,169,4,1,0,0,0,170,171,5,40,0,0,171,6,1,0,0,0,172,173,5,41,0,0,173,8,
	1,0,0,0,174,175,5,91,0,0,175,10,1,0,0,0,176,177,5,93,0,0,177,12,1,0,0,0,
	178,179,5,123,0,0,179,14,1,0,0,0,180,181,5,125,0,0,181,16,1,0,0,0,182,183,
	5,46,0,0,183,18,1,0,0,0,184,185,5,44,0,0,185,20,1,0,0,0,186,187,5,58,0,
	0,187,22,1,0,0,0,188,189,5,59,0,0,189,24,1,0,0,0,190,191,5,61,0,0,191,26,
	1,0,0,0,192,193,5,118,0,0,193,194,5,97,0,0,194,195,5,114,0,0,195,28,1,0,
	0,0,196,197,5,114,0,0,197,198,5,101,0,0,198,199,5,116,0,0,199,200,5,117,
	0,0,200,201,5,114,0,0,201,202,5,110,0,0,202,30,1,0,0,0,203,204,5,102,0,
	0,204,205,5,117,0,0,205,206,5,110,0,0,206,207,5,99,0,0,207,208,5,116,0,
	0,208,209,5,105,0,0,209,210,5,111,0,0,210,211,5,110,0,0,211,32,1,0,0,0,
	212,217,3,35,17,0,213,217,3,37,18,0,214,217,3,39,19,0,215,217,3,41,20,0,
	216,212,1,0,0,0,216,213,1,0,0,0,216,214,1,0,0,0,216,215,1,0,0,0,217,34,
	1,0,0,0,218,220,3,45,22,0,219,221,3,43,21,0,220,219,1,0,0,0,220,221,1,0,
	0,0,221,36,1,0,0,0,222,224,3,59,29,0,223,225,3,43,21,0,224,223,1,0,0,0,
	224,225,1,0,0,0,225,38,1,0,0,0,226,228,3,69,34,0,227,229,3,43,21,0,228,
	227,1,0,0,0,228,229,1,0,0,0,229,40,1,0,0,0,230,232,3,79,39,0,231,233,3,
	43,21,0,232,231,1,0,0,0,232,233,1,0,0,0,233,42,1,0,0,0,234,235,7,1,0,0,
	235,44,1,0,0,0,236,247,5,48,0,0,237,244,3,51,25,0,238,240,3,47,23,0,239,
	238,1,0,0,0,239,240,1,0,0,0,240,245,1,0,0,0,241,242,3,57,28,0,242,243,3,
	47,23,0,243,245,1,0,0,0,244,239,1,0,0,0,244,241,1,0,0,0,245,247,1,0,0,0,
	246,236,1,0,0,0,246,237,1,0,0,0,247,46,1,0,0,0,248,253,3,49,24,0,249,251,
	3,53,26,0,250,249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,254,3,49,
	24,0,253,250,1,0,0,0,253,254,1,0,0,0,254,48,1,0,0,0,255,258,5,48,0,0,256,
	258,3,51,25,0,257,255,1,0,0,0,257,256,1,0,0,0,258,50,1,0,0,0,259,260,7,
	2,0,0,260,52,1,0,0,0,261,263,3,55,27,0,262,261,1,0,0,0,263,264,1,0,0,0,
	264,262,1,0,0,0,264,265,1,0,0,0,265,54,1,0,0,0,266,269,3,49,24,0,267,269,
	5,95,0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,56,1,0,0,0,270,272,5,95,0,
	0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,58,
	1,0,0,0,275,276,5,48,0,0,276,277,7,3,0,0,277,278,3,61,30,0,278,60,1,0,0,
	0,279,284,3,63,31,0,280,282,3,65,32,0,281,280,1,0,0,0,281,282,1,0,0,0,282,
	283,1,0,0,0,283,285,3,63,31,0,284,281,1,0,0,0,284,285,1,0,0,0,285,62,1,
	0,0,0,286,287,7,4,0,0,287,64,1,0,0,0,288,290,3,67,33,0,289,288,1,0,0,0,
	290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,66,1,0,0,0,293,296,
	3,63,31,0,294,296,5,95,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,68,1,0,0,
	0,297,299,5,48,0,0,298,300,3,57,28,0,299,298,1,0,0,0,299,300,1,0,0,0,300,
	301,1,0,0,0,301,302,3,71,35,0,302,70,1,0,0,0,303,308,3,73,36,0,304,306,
	3,75,37,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,309,3,73,
	36,0,308,305,1,0,0,0,308,309,1,0,0,0,309,72,1,0,0,0,310,311,7,5,0,0,311,
	74,1,0,0,0,312,314,3,77,38,0,313,312,1,0,0,0,314,315,1,0,0,0,315,313,1,
	0,0,0,315,316,1,0,0,0,316,76,1,0,0,0,317,320,3,73,36,0,318,320,5,95,0,0,
	319,317,1,0,0,0,319,318,1,0,0,0,320,78,1,0,0,0,321,322,5,48,0,0,322,323,
	7,6,0,0,323,324,3,81,40,0,324,80,1,0,0,0,325,330,3,83,41,0,326,328,3,85,
	42,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,3,83,41,0,
	330,327,1,0,0,0,330,331,1,0,0,0,331,82,1,0,0,0,332,333,7,7,0,0,333,84,1,
	0,0,0,334,336,3,87,43,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,
	337,338,1,0,0,0,338,86,1,0,0,0,339,342,3,83,41,0,340,342,5,95,0,0,341,339,
	1,0,0,0,341,340,1,0,0,0,342,88,1,0,0,0,343,346,3,91,45,0,344,346,3,103,
	51,0,345,343,1,0,0,0,345,344,1,0,0,0,346,90,1,0,0,0,347,348,3,47,23,0,348,
	350,5,46,0,0,349,351,3,47,23,0,350,349,1,0,0,0,350,351,1,0,0,0,351,353,
	1,0,0,0,352,354,3,93,46,0,353,352,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,
	0,355,357,3,101,50,0,356,355,1,0,0,0,356,357,1,0,0,0,357,375,1,0,0,0,358,
	359,5,46,0,0,359,361,3,47,23,0,360,362,3,93,46,0,361,360,1,0,0,0,361,362,
	1,0,0,0,362,364,1,0,0,0,363,365,3,101,50,0,364,363,1,0,0,0,364,365,1,0,
	0,0,365,375,1,0,0,0,366,367,3,47,23,0,367,369,3,93,46,0,368,370,3,101,50,
	0,369,368,1,0,0,0,369,370,1,0,0,0,370,375,1,0,0,0,371,372,3,47,23,0,372,
	373,3,101,50,0,373,375,1,0,0,0,374,347,1,0,0,0,374,358,1,0,0,0,374,366,
	1,0,0,0,374,371,1,0,0,0,375,92,1,0,0,0,376,377,3,95,47,0,377,378,3,97,48,
	0,378,94,1,0,0,0,379,380,7,8,0,0,380,96,1,0,0,0,381,383,3,99,49,0,382,381,
	1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,3,47,23,0,385,98,1,0,0,
	0,386,387,7,9,0,0,387,100,1,0,0,0,388,389,7,10,0,0,389,102,1,0,0,0,390,
	391,3,105,52,0,391,393,3,107,53,0,392,394,3,101,50,0,393,392,1,0,0,0,393,
	394,1,0,0,0,394,104,1,0,0,0,395,397,3,59,29,0,396,398,5,46,0,0,397,396,
	1,0,0,0,397,398,1,0,0,0,398,407,1,0,0,0,399,400,5,48,0,0,400,402,7,3,0,
	0,401,403,3,61,30,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,
	405,5,46,0,0,405,407,3,61,30,0,406,395,1,0,0,0,406,399,1,0,0,0,407,106,
	1,0,0,0,408,409,3,109,54,0,409,410,3,97,48,0,410,108,1,0,0,0,411,412,7,
	11,0,0,412,110,1,0,0,0,413,414,5,110,0,0,414,415,5,117,0,0,415,416,5,108,
	0,0,416,417,5,108,0,0,417,112,1,0,0,0,418,419,5,116,0,0,419,420,5,114,0,
	0,420,421,5,117,0,0,421,428,5,101,0,0,422,423,5,102,0,0,423,424,5,97,0,
	0,424,425,5,108,0,0,425,426,5,115,0,0,426,428,5,101,0,0,427,418,1,0,0,0,
	427,422,1,0,0,0,428,114,1,0,0,0,429,430,5,39,0,0,430,431,3,117,58,0,431,
	432,5,39,0,0,432,438,1,0,0,0,433,434,5,39,0,0,434,435,3,125,62,0,435,436,
	5,39,0,0,436,438,1,0,0,0,437,429,1,0,0,0,437,433,1,0,0,0,438,116,1,0,0,
	0,439,440,8,12,0,0,440,118,1,0,0,0,441,443,5,34,0,0,442,444,3,121,60,0,
	443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,446,5,34,0,0,446,120,
	1,0,0,0,447,449,3,123,61,0,448,447,1,0,0,0,449,450,1,0,0,0,450,448,1,0,
	0,0,450,451,1,0,0,0,451,122,1,0,0,0,452,455,8,13,0,0,453,455,3,125,62,0,
	454,452,1,0,0,0,454,453,1,0,0,0,455,124,1,0,0,0,456,457,5,92,0,0,457,461,
	7,14,0,0,458,461,3,127,63,0,459,461,3,131,65,0,460,456,1,0,0,0,460,458,
	1,0,0,0,460,459,1,0,0,0,461,126,1,0,0,0,462,463,5,92,0,0,463,474,3,73,36,
	0,464,465,5,92,0,0,465,466,3,73,36,0,466,467,3,73,36,0,467,474,1,0,0,0,
	468,469,5,92,0,0,469,470,3,129,64,0,470,471,3,73,36,0,471,472,3,73,36,0,
	472,474,1,0,0,0,473,462,1,0,0,0,473,464,1,0,0,0,473,468,1,0,0,0,474,128,
	1,0,0,0,475,476,7,15,0,0,476,130,1,0,0,0,477,479,5,92,0,0,478,480,5,117,
	0,0,479,478,1,0,0,0,480,481,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,
	483,1,0,0,0,483,484,3,63,31,0,484,485,3,63,31,0,485,486,3,63,31,0,486,487,
	3,63,31,0,487,132,1,0,0,0,488,492,7,16,0,0,489,491,3,141,70,0,490,489,1,
	0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,134,1,0,0,0,494,
	492,1,0,0,0,495,499,7,17,0,0,496,498,3,141,70,0,497,496,1,0,0,0,498,501,
	1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,136,1,0,0,0,501,499,1,0,0,0,
	502,506,3,139,69,0,503,505,3,141,70,0,504,503,1,0,0,0,505,508,1,0,0,0,506,
	504,1,0,0,0,506,507,1,0,0,0,507,138,1,0,0,0,508,506,1,0,0,0,509,510,7,18,
	0,0,510,140,1,0,0,0,511,512,7,19,0,0,512,142,1,0,0,0,513,515,7,20,0,0,514,
	513,1,0,0,0,515,516,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,518,1,0,
	0,0,518,519,6,71,1,0,519,144,1,0,0,0,55,0,151,165,216,220,224,228,232,239,
	244,246,250,253,257,264,268,273,281,284,291,295,299,305,308,315,319,327,
	330,337,341,345,350,353,356,361,364,369,374,382,393,397,402,406,427,437,
	443,450,454,460,473,481,492,499,506,516,2,0,2,0,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AiLexer.__ATN) {
			AiLexer.__ATN = new ATNDeserializer().deserialize(AiLexer._serializedATN);
		}

		return AiLexer.__ATN;
	}


	static DecisionsToDFA = AiLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}